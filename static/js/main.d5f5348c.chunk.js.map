{"version":3,"sources":["NftDisplay.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["require","mintListSet","Set","MintList","map","m","add","TraitDisplay","props","i","hidden","name","traits","t","trait_type","value","image","src","className","alt","TokenDisplay","publicKey","useWallet","connection","useConnection","useState","nfts","setNfts","onConnect","useCallback","a","getParsedTokenAccountsByOwner","programId","PublicKey","then","accounts","account","data","parsed","info","mint","filter","has","toString","axios","get","r","results","length","nft","onClick","disabled","NftDisplay","network","WalletAdapterNetwork","Mainnet","endpoint","useMemo","clusterApiUrl","wallets","getPhantomWallet","getSlopeWallet","getSolflareWallet","getTorusWallet","options","clientId","getLedgerWallet","getSolletWallet","getSolletExtensionWallet","ConnectionProvider","WalletProvider","autoConnect","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"ux2cAqBAA,EAAQ,KAER,IAAMC,EAAc,IAAIC,IACxBC,EAASC,KAAI,SAAAC,GAAC,OAAIJ,EAAYK,IAAID,MAelC,IAAME,EAAe,SAACC,GACnB,IAAIC,EAAI,EACP,OACI,gCACI,oBAAIC,OAAuB,SAAfF,EAAMG,KAAlB,SAAoCH,EAAMG,OACzCH,EAAMI,OAAOR,KAAI,SAAAS,GAAC,OAAI,+BAAeA,EAAEC,WAAjB,MAAgCD,EAAEE,QAAzBN,QAChC,qBAAKC,OAAwB,SAAhBF,EAAMQ,MAAkBC,IAAKT,EAAMQ,MAAOE,UAAU,YAAYC,IAAI,YAKvFC,EAAmB,SAAAZ,GACrB,IAAOa,EAAaC,cAAbD,UACCE,EAAeC,cAAfD,WAER,EAAwBE,mBADG,IAC3B,mBAAOC,EAAP,KAAaC,EAAb,KAEMC,EAAYC,sBAAW,sBAAC,sBAAAC,EAAA,yDAET,MAAbT,EAFsB,iEAGEE,EAAWQ,8BACnCV,EACA,CAACW,UAAY,IAAIC,IAAU,gDAC3B,aACCC,MAAK,SAAAC,GAAQ,OAAIA,EAASpB,MAAMX,KAAI,SAAA0B,GAAC,OAAIA,EAAEM,QAAQC,KAAKC,OAAOC,KAAKC,WAP/C,cAQZC,QAAO,SAAApC,GAAC,OAAIJ,EAAYyC,IAAIrC,EAAEsC,eACvCvC,KAAI,SAAAC,GAAC,OAAIuC,IAAMC,IAAN,mEAAsExC,IAC3E6B,MAAK,SAAAY,GACFnB,GAAQ,SAAAD,GAAI,4BAAQA,GAAR,CAAc,CAACf,KAAMmC,EAAET,KAAKU,QAAP,MAAyB/B,MAAO8B,EAAET,KAAKU,QAAP,IAAsBnC,OAAQkC,EAAET,KAAKU,QAAP,uBAXjF,2CAa3B,CAACxB,EAAYF,EAAWM,IACnBlB,EAAI,EACZ,OACI,gCACI,oBAAIC,OAAqB,MAAbW,EAAZ,uDACA,oBAAIX,OAAQgB,EAAKsB,OAAS,IAAM3B,EAAhC,gDACA,oBAAIX,OAAwB,IAAhBgB,EAAKsB,SAAiB3B,EAAlC,qCACCK,EAAKtB,KAAI,SAAA6C,GAAG,OACX,cAAC,EAAD,CAEErC,OAAQqC,EAAIrC,OACZI,MAAOiC,EAAIjC,MACXL,KAAMsC,EAAItC,MAHLF,QAMT,wBAAQS,UAAW,wBAA0BgC,QAAStB,EAAWuB,UAAW9B,EAA5E,+BAKC+B,EAAiB,WAE1B,IAAMC,EAAUC,IAAqBC,QAE/BC,EAAWC,mBAAQ,kBAAMC,YAAcL,KAAU,CAACA,IAIlDM,EAAUF,mBAAQ,iBAAM,CAC1BG,cACAC,cACAC,cACAC,YAAe,CACXC,QAAS,CAAEC,SAAU,gDAEzBC,cACAC,YAAgB,CAAEd,YAClBe,YAAyB,CAAEf,eAC5B,CAACA,IAEJ,OACI,cAACgB,EAAA,EAAD,CAAoBb,SAAUA,EAA9B,SACI,cAACc,EAAA,EAAD,CAAgBX,QAASA,EAASY,aAAW,EAA7C,SACI,eAAC,IAAD,WACI,cAAC,EAAD,IACA,cAAC,IAAD,YClGLC,MAVf,WACE,OACE,qBAAKtD,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACI,cAAC,EAAD,SCIKuD,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBzC,MAAK,YAAkD,IAA/C0C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d5f5348c.chunk.js","sourcesContent":["import React, {FC, useMemo, useCallback, useState} from 'react';\r\nimport {ConnectionProvider, useWallet, WalletProvider, useConnection } from '@solana/wallet-adapter-react';\r\nimport { WalletAdapterNetwork } from '@solana/wallet-adapter-base';\r\nimport MintList from './mints_BPbS1AC4KW5SBiz8M2AgPtWXTzR1ekBwMLLQLcwdvZnE.json'\r\nimport axios from 'axios';\r\nimport {\r\n    getLedgerWallet,\r\n    getPhantomWallet,\r\n    getSlopeWallet,\r\n    getSolflareWallet,\r\n    getSolletExtensionWallet,\r\n    getSolletWallet,\r\n    getTorusWallet,\r\n} from '@solana/wallet-adapter-wallets';\r\nimport {\r\n    WalletModalProvider,\r\n    WalletMultiButton\r\n} from '@solana/wallet-adapter-react-ui';\r\nimport { clusterApiUrl, PublicKey } from '@solana/web3.js';\r\n\r\n// Default styles that can be overridden by your app\r\nrequire('@solana/wallet-adapter-react-ui/styles.css');\r\n\r\nconst mintListSet = new Set();\r\nMintList.map(m => mintListSet.add(m));\r\n\r\n\r\ntype NftInfo = {\r\n    traits: Trait[]\r\n    image: string\r\n    name: string\r\n}\r\n\r\ntype Trait =\r\n{\r\n    trait_type: string;\r\n    value: string\r\n}\r\n\r\nconst TraitDisplay = (props: NftInfo) => {\r\n   let i = 0;\r\n    return(\r\n        <div>\r\n            <h2 hidden={props.name === 'null'}>{props.name}</h2>\r\n            {props.traits.map(t => <li key={i++}>{t.trait_type} = {t.value}</li>)}\r\n            <img hidden={props.image === 'null'} src={props.image} className=\"nft-image\" alt=\"nft\"/>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst TokenDisplay: FC = props => {\r\n    const {publicKey} = useWallet();\r\n    const { connection } = useConnection();\r\n    const initVal: NftInfo[] = [];\r\n    const [nfts, setNfts] = useState(initVal);\r\n\r\n    const onConnect = useCallback(async () =>\r\n    {\r\n        if (publicKey == null) return;\r\n        const mintAddresses = await connection.getParsedTokenAccountsByOwner(\r\n            publicKey,\r\n            {programId : new PublicKey(\"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\")},\r\n            \"confirmed\")\r\n            .then(accounts => accounts.value.map(a => a.account.data.parsed.info.mint));\r\n        mintAddresses.filter(m => mintListSet.has(m.toString()))\r\n            .map(m => axios.get(`https://api-mainnet.magiceden.io/rpc/getNFTByMintAddress/${m}`)\r\n                .then(r => {\r\n                    setNfts(nfts => [...nfts, {name: r.data.results['title'], image: r.data.results['img'],traits: r.data.results['attributes']}]);\r\n                }));\r\n    }, [connection, publicKey, setNfts]);\r\n        let i = 0;  \r\n    return (\r\n        <div>\r\n            <h1 hidden={publicKey != null}>Connect your wallet to see your Orcanauts</h1>\r\n            <h1 hidden={nfts.length > 0 || !publicKey}>Click button to see your Orcanauts</h1>\r\n            <h1 hidden={nfts.length === 0 || !publicKey}>Here are your Orcanauts</h1>\r\n            {nfts.map(nft => (\r\n              <TraitDisplay\r\n                key={i++}\r\n                traits={nft.traits}\r\n                image={nft.image}\r\n                name={nft.name}\r\n              />\r\n            ))}\r\n            <button className={\"wallet-adapter-button\"}  onClick={onConnect} disabled={!publicKey}>Get Orcanauts</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport const NftDisplay: FC = () => {\r\n    // Can be set to 'devnet', 'testnet', or 'mainnet-beta'\r\n    const network = WalletAdapterNetwork.Mainnet;\r\n    // You can also provide a custom RPC endpoint\r\n    const endpoint = useMemo(() => clusterApiUrl(network), [network]);\r\n\r\n    // @solana/wallet-adapter-wallets includes all the adapters but supports tree shaking --\r\n    // Only the wallets you configure here will be compiled into your application\r\n    const wallets = useMemo(() => [\r\n        getPhantomWallet(),\r\n        getSlopeWallet(),\r\n        getSolflareWallet(),\r\n        getTorusWallet({\r\n            options: { clientId: 'Get a client ID @ https://developer.tor.us' }\r\n        }),\r\n        getLedgerWallet(),\r\n        getSolletWallet({ network }),\r\n        getSolletExtensionWallet({ network }),\r\n    ], [network]);\r\n\r\n    return (\r\n        <ConnectionProvider endpoint={endpoint}>\r\n            <WalletProvider wallets={wallets} autoConnect>\r\n                <WalletModalProvider>\r\n                    <TokenDisplay/>\r\n                    <WalletMultiButton />\r\n                </WalletModalProvider>\r\n            </WalletProvider>\r\n        </ConnectionProvider>\r\n    );\r\n};\r\n","import React from 'react';\nimport './App.css';\nimport { NftDisplay } from './NftDisplay';\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n          <NftDisplay/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}